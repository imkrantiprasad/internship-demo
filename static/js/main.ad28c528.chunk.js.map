{"version":3,"sources":["Comment.js","App.js","serviceWorker.js","index.js"],"names":["Comment","props","className","class","onClick","handleUpClick","id","icon","faThumbsUp","up","handleDownClick","faThumbsDown","down","name","comments","App","state","votes","votedata","bind","console","log","this","setState","prevState","map","vote","dataItem","style","width","height","type","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4sBAyBeA,MArBf,SAAiBC,GACb,OACI,6BACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,QACX,4BAAQC,MAAM,UAAUC,QAAS,kBAAMH,EAAMI,cAAcJ,EAAMK,MAC7D,0BAAMJ,UAAU,MAAK,kBAAC,IAAD,CAAiBK,KAAMC,QAFpD,IAGeP,EAAMQ,GAHrB,WAIF,6BACM,4BAAQN,MAAM,UAAUC,QAAS,kBAAMH,EAAMS,gBAAgBT,EAAMK,MAC/D,0BAAMJ,UAAU,QAAO,kBAAC,IAAD,CAAiBK,KAAMI,QANtD,IAOeV,EAAMW,KAPrB,cASA,yBAAKV,UAAU,WACX,0BAAMA,UAAU,WAAWD,EAAMY,MACjC,2BAAIZ,EAAMa,cCiEfC,E,kDA9Eb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAOC,GAGT,EAAKb,cAAgB,EAAKA,cAAcc,KAAnB,gBACrB,EAAKT,gBAAkB,EAAKA,gBAAgBS,KAArB,gBAPX,E,0DAUAb,GACZc,QAAQC,IAAIf,GACZgB,KAAKC,UAAS,SAAAC,GAUZ,MAAO,CACLP,MAVcO,EAAUP,MAAMQ,KAAI,SAAAC,GAClC,OAAIA,EAAKpB,KAAOA,EACP,2BACFoB,GADL,IAEEjB,GAAIiB,EAAKjB,GAAK,IAGXiB,W,sCAOGpB,GACdgB,KAAKC,UAAS,SAAAC,GAUZ,MAAO,CACLP,MAVcO,EAAUP,MAAMQ,KAAI,SAAAC,GAClC,OAAIA,EAAKpB,KAAOA,EACP,2BACFoB,GADL,IAEEd,KAAMc,EAAKd,KAAO,IAGfc,W,+BAOH,IAAD,OAODC,EAAWL,KAAKN,MAAMC,MAAMQ,KAAI,SAAAC,GAAI,OACxC,kBAAC,EAAD,CACEpB,GAAIoB,EAAKpB,GACTO,KAAMa,EAAKb,KACXC,SAAUY,EAAKZ,SACfL,GAAIiB,EAAKjB,GACTG,KAAMc,EAAKd,KACXP,cAAe,EAAKA,cACpBK,gBAAiB,EAAKA,qBAG1B,OACE,yBAAKR,UAAU,QACb,yBAAKA,UAAU,WACb,8BACE,2BAAO0B,MArBI,CACjBC,MAAO,OACPC,OAAQ,KAmBwBC,KAAK,OAAO7B,UAAU,UAAU8B,YAAY,sBACtE,6BACA,4BAAQ9B,UAAU,OAAlB,kBAGJ,yBAAKA,UAAU,cACZyB,Q,GAxEOM,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.ad28c528.chunk.js","sourcesContent":["import React from 'react'\r\nimport { faThumbsUp, faThumbsDown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nfunction Comment(props) {\r\n    return (\r\n        <div>\r\n            <div className=\"box\">\r\n                <div className=\"vote\">\r\n                    <button class=\"btnIcon\" onClick={() => props.handleUpClick(props.id)}>\r\n                        <span className=\"up\"><FontAwesomeIcon icon={faThumbsUp} /></span>\r\n                    </button> {props.up} upvotes\r\n              <br />\r\n                    <button class=\"btnIcon\" onClick={() => props.handleDownClick(props.id)}>\r\n                        <span className=\"down\"><FontAwesomeIcon icon={faThumbsDown} /></span>\r\n                    </button> {props.down} downvotes\r\n            </div>\r\n                <div className=\"comment\">\r\n                    <span className=\"boxHead\">{props.name}</span>\r\n                    <p>{props.comments}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Comment","import React from 'react';\nimport './App.css';\nimport votedata from \"./votedata.json\"\nimport Comment from './Comment';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      votes: votedata\n    }\n\n    this.handleUpClick = this.handleUpClick.bind(this)\n    this.handleDownClick = this.handleDownClick.bind(this)\n\n  }\n  handleUpClick(id) {\n    console.log(id)\n    this.setState(prevState => {\n      const updated = prevState.votes.map(vote => {\n        if (vote.id === id) {\n          return {\n            ...vote,\n            up: vote.up + 1\n          }\n        }\n        return vote\n      })\n      return {\n        votes: updated\n      }\n    })\n  }\n  handleDownClick(id) {\n    this.setState(prevState => {\n      const updated = prevState.votes.map(vote => {\n        if (vote.id === id) {\n          return {\n            ...vote,\n            down: vote.down + 1\n          }\n        }\n        return vote\n      })\n      return {\n        votes: updated\n      }\n    })\n  }\n  render() {\n    const inputStyle = {\n      width: '100%',\n      height: 200,\n      // float: 'center'\n      // margin: 'auto'\n    };\n    const dataItem = this.state.votes.map(vote =>\n      <Comment\n        id={vote.id}\n        name={vote.name}\n        comments={vote.comments}\n        up={vote.up}\n        down={vote.down}\n        handleUpClick={this.handleUpClick}\n        handleDownClick={this.handleDownClick}\n      />\n    )\n    return (\n      <div className=\"main\" >\n        <div className=\"formBox\">\n          <form>\n            <input style={inputStyle} type=\"text\" className=\"inptBox\" placeholder=\"Type a comment...\" />\n            <br />\n            <button className=\"btn\" >Post Comment</button>\n          </form>\n        </div>\n        <div className=\"commentBox\">\n          {dataItem}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}